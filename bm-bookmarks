#!/bin/bash

# bm-bookmarks was originally adapted from jeroenjanssens.com http://goo.gl/0uRAHz

if [[ -z "${BMPATH:-}" ]]; then
  export BMPATH="${XDG_CONFIG_HOME:-${HOME}/.config}/bm-bookmarks"
fi

_bm_completion() {
  local -- word="${COMP_WORDS[COMP_CWORD]}"
  local -a list
  # single quotes don't work for the printf argument
  readarray -t list < <(
    find "${BMPATH}/" -type l -printf "%f\\n"
  )
  readarray -t COMPREPLY < <(
    compgen -W "${list[*]}" -- "${word}"
  )
}

bma() { # bm audit
  local -- link target
  local -a links
  readarray -t links < <(find "${BMPATH}/" -type l)
  for link in "${links[@]}"; do
    read -r target < <(
      readlink -f "${link}"
    )
    if [[ ! -d "${target}" ]]; then
      printf '%s -> %s\n' "${link##*/}" "$(tilde "${target}")"
    fi
  done
}

bm() { # bm a.k.a. bm create
  [[ ! -d ${BMPATH} ]] && mkdir -vp "${BMPATH}"
  local -- bm_name full_path
  bm_name="${1:-${PWD##*/}}"
  full_path="${BMPATH}/${bm_name}"
  # one-letter BMs are ephemeral by design
  [[ ${#bm_name} -eq 1 && -L "${full_path}" ]] && rm "${full_path}"
  ln -s "${PWD}" "${full_path}"
  BM_PREFIX=+ bml "${bm_name}"
}

bmc() { # bm cd
  local -- link_name subdir='' link_target
  link_name="${1%%/*}"
  [[ "${1}" =~ / ]] && subdir="${1#*/}"
  link_name="${BMPATH}/${link_name}"
  if [[ ! -L "${link_name}" ]]; then
    echo "${FUNCNAME[0]} error: link not found" 1>&2 && return ${LINENO}
  fi
  link_target="$( readlink -f "${link_name}" )"
  if [[ ! -d "${link_target}" ]]; then
    echo "${FUNCNAME[0]} error: broken link, try bma" 1>&2 && return ${LINENO}
  fi
  if ! cd "${link_target}"; then
    echo "${FUNCNAME[0]} error: cd failed" 1>&2 && return ${LINENO}
  fi
}

bml() { # bm ls
  local -- prefix="${BM_PREFIX:-=}" item
  local -a list
  # shellcheck disable=SC2015
  [[ ${#} -gt 0 ]] &&
    list=("${@}") ||
    readarray -t list < <(find "${BMPATH}" -maxdepth 1 -type l)
  for item in "${list[@]}"; do
    if [[ -L "${BMPATH}/${item}" ]]; then
      item="${BMPATH}/${item}"
    fi
    printf '%s %s -> %s\n' "${prefix}" "${item##*/}" "$(tilde "$(realpath "${item}")")"
  done | sort | column -t
}

bmr() { # bm rm
  local -- link
  if [[ ${#} -eq 0 ]]; then
    echo "${FUNCNAME[0]} error: removal requires name(s)" 1>&2 && return ${LINENO}
  fi
  BM_PREFIX=- bml "${@}" || return ${?}
  (
    cd "${BMPATH}" &&
    for link in "${@}"; do
      rm "${link##*/}" || return ${LINENO}
    done
  ) ||
    echo "${FUNCNAME[0]} error: attempt failed" 1>&2 && return ${LINENO}
}

bmu() { # bm update
  bmr "${1}"
  bm "${1}"
}

tilde() {
  local -- path
  (
  export IFS=$'\n'
  for path in "${@}"; do
    [[ "${path}" =~ ${HOME} ]] &&
      path="${path/${HOME//\//\\\/}/\~}"
    echo "${path}"
  done
  )
}

complete -F _bm_completion bmc bml bmr bmu

#
