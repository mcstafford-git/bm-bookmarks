#!/bin/bash

# bm-bookmarks was originally adapted from jeroenjanssens.com http://goo.gl/0uRAHz

[[ -z "${BMPATH:-}" ]] &&
  export BMPATH="${XDG_CONFIG_HOME:-${HOME}/.config}/bm-bookmarks"

_bm_completion() {
  local -- word="${COMP_WORDS[COMP_CWORD]}"
  local -a list
  # single quotes don't work for the printf argument
  readarray -t list < <(
    find "${BMPATH}/" -type l -printf "%f\\n"
  )
  readarray -t COMPREPLY < <(
    compgen -W "${list[*]}" -- "${word}"
  )
}

_bm_error() {
  echo "bm-bookmarks error: ${*}" 1>&2
}

bma() { # bm audit
  local -- link target
  local -a links
  readarray -t links < <(find "${BMPATH}/" -type l)
  for link in "${links[@]}"; do
    read -r target < <(
      readlink -f "${link}"
    )
    if [[ ! -d "${target}" ]]; then
      printf '%s -> %s\n' "${link##*/}" "$(tilde "${target}")"
    fi
  done
}

bm() { # bm a.k.a. bm create
  [[ ! -d ${BMPATH} ]] && mkdir -vp "${BMPATH}"
  local -- bm_name full_path
  bm_name="${1:-${PWD##*/}}"
  full_path="${BMPATH}/${bm_name}"
  # one-letter BMs are ephemeral by design
  [[ ${#bm_name} -eq 1 && -L "${full_path}" ]] && rm "${full_path}"
  ln -s "${PWD}" "${full_path}"
  bml "${bm_name}"
}

bmc() { # bm cd
  local -- link_name subdir='' link_target
  link_name="${1%%/*}"
  [[ "${1}" =~ / ]] && subdir="${1#*/}"
  link_name="${BMPATH}/${link_name}"
  [[ ! -L "${link_name}" ]] && _bm_error link not found && return ${LINENO}
  link_target="$( readlink -f "${link_name}" )"
  [[ ! -d "${link_target}" ]] && _bm_error broken link && return ${LINENO}
  cd "${link_target}/${subdir}" ||
    return ${LINENO}
}

bml() { # bm ls
  local -- item
  local -a list
  # shellcheck disable=SC2015
  [[ ${#} -gt 0 ]] &&
    list=("${@}") ||
    readarray -t list < <(find "${BMPATH}" -maxdepth 1 -type l)
  for item in "${list[@]}"; do
    if [[ -L "${BMPATH}/${item}" ]]; then
      item="${BMPATH}/${item}"
    fi
    printf '%s -> %s\n' "${item##*/}" "$(tilde "$(realpath "${item}")")"
  done | sort | column -t
}

bmr() { # bm rm
  local -- link
  [[ ${#} -eq 0 ]] && return ${LINENO}
  printf 'Removing:\n%s\n' "$(bml "${@}")"
  (
    cd "${BMPATH}" || return ${LINENO}
    for link in "${@}"; do
      rm "${link##*/}" || return ${LINENO}
    done
  )
}

bmu() { # bm update
  local -- bm="${1:-"${PWD##*/}"}"
  if bml "${bm}" 1>/dev/null; then
    bmr "${bm}"
    bm "${bm}"
  fi
}

complete -F _bm_completion bmc bml bmr bmu

#
