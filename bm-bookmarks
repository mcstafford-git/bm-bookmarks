#!/bin/bash

# bm-bookmarks was originally adapted from jeroenjanssens.com http://goo.gl/0uRAHz

[[ -z "${BMPATH:-}" ]] && export BMPATH="${HOME}/.config/bm-bookmarks"

_bm_error() {
  echo "bm-bookmarks error: ${*}" 1>&2
}

bm-audit() {
  local -- link
  local -a links
  readarray -t links < <(find "${BMPATH}/" -type l)
  for link in "${links[@]}"; do
    [[ -d "$(readlink -f "${link}" )" ]] || 'ls' -alFh "${link}"
  done
}

bmc() { # bm cd
  local -- link_name subdir='' link_target
  link_name="${1%%/*}"
  [[ "${1}" =~ / ]] && subdir="${1#*/}"
  link_name="${BMPATH}/${link_name}"
  [[ ! -L "${link_name}" ]] && _bm_error link not found && return ${LINENO}
  link_target="$( readlink -f "${link_name}" )"
  [[ ! -d "${link_target}" ]] && _bm_error broken link && return ${LINENO}
  cd "${link_target}/${subdir}" ||
    return ${LINENO}
}

bm() { # bm a.k.a. bm create
  [[ ! -d ${BMPATH} ]] && mkdir -vp "${BMPATH}"
  local -- bm_name full_path
  bm_name="${1:-$(basename "${PWD}")}"
  full_path="${BMPATH}/${bm_name}"
  # one-letter BMs are ephemeral by design
  [[ ${#bm_name} -eq 1 && -L "${full_path}" ]] && rm "${full_path}"
  ln -s "${PWD}" "${full_path}"
  bml "${bm_name}"
}

bmr() { # bm rm
  (
    cd "${BMPATH}" || return ${LINENO}
    for bm in "${@}"; do
      if bml "${bm}"; then
        rm -v "${bm}" || return ${LINENO}
      fi
    done
  )
}

bml() { # bm ls
  local -- item
  local -a list
  # shellcheck disable=SC2015
  [[ ${#} -gt 0 ]] &&
    list=("${@}") ||
    readarray -t list < <(find "${BMPATH}" -maxdepth 1 -type l)
  for item in "${list[@]}"; do
    # test
    [[ -L "${BMPATH}/${item}" || -L "${item}" ]] &&
      echo "${item##*/} -> $(realpath "${item}")"
  done | sort | column -t
}

bmu() {
  local -- bm="${1:-"$(basename "${PWD}")"}"
  if bml "${bm}" 1>/dev/null; then
    bmr "${bm}"
    bm "${bm}"
  fi
}

_bm_completion() {
  local -a list
  # single quotes don't work for the printf argument
  mapfile -t list < <(find "${BMPATH}/" -type l -printf "%f\\n")
  mapfile -t COMPREPLY < <(compgen -W "${list[*]}" -- "${COMP_WORDS[COMP_CWORD]}")
}

complete -F _bm_completion bmc bml bmr

#
